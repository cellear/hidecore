<?php

/**
 * @file
 * Hides core modules on the modules page using CSS.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function hidecore_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.hidecore':
      $output = '<p>';
      $output .= t('The modules list page can be confusing to new users, because it displays numerous modules that are included with Drupal, and that makes it hard to pick out the modules that have been selected or created specifically for the user\'s own site.');
      $output .= '</p><p>';
      $output .= t('This module addresses that by simply hiding the modules that come with Drupal, allowing the user to quickly grasp the functionality that has been added.');
      $output .= '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hidecore_form_system_modules_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'hidecore/hide-the-modules';
  $modules = \Drupal::service('extension.list.module')->reset()->getList();
  foreach ($modules as $name => $module) {
    $classes = [];
    if ($module->origin === 'core') {
      $classes[] = 'hidecore';
    }
    if (!empty($classes)) {
      foreach (Element::children($form['modules']) as $package) {
        if (isset($form['modules'][$package][$name])) {
          // If there is no array to merge with, create one.
          if (!isset($form['modules'][$package][$name]['#attributes']['class'])) {
            $form['modules'][$package][$name]['#attributes']['class'] = [];
          }
          $form['modules'][$package][$name]['#attributes']['class'] = array_merge(
            $form['modules'][$package][$name]['#attributes']['class'],
            $classes
          );
          break;
        }
      }
    }
  }
}

